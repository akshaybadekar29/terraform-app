variable "aws_region" {
    description = "EC2 Region for the VPC"
    default = "eu-west-1"
}

variable "amis" {
    description = "AMIs by region"
    default = {
        eu-west-1 = "ami-00068cd7555f543d5"
    }
}

variable "vpc_cidr" {
    description = "CIDR for the whole VPC"
    default = "10.0.0.0/16"
}

variable "public_subnet_cidr" {
    description = "CIDR for the Public Subnet"
    default = "10.0.0.0/24"
}

variable "public_subnet_2_cidr" {
    description = "CIDR for the Public Subnet"
    default = "10.0.2.0/24"
}


variable "private_subnet_cidr" {
    description = "CIDR for the Private Subnet"
    default = "10.0.1.0/24"
}


#################################################

#####VPC

resource "aws_vpc" "default" {
    cidr_block = "${var.vpc_cidr}"

}
#####IGW

resource "aws_internet_gateway" "gw" {
    vpc_id = "${aws_vpc.default.id}"
}


#########Subnets

resource "aws_subnet" "public_subnet" {
    vpc_id = "${aws_vpc.default.id}"

    cidr_block = "${var.public_subnet_cidr}"
    availability_zone = "eu-west-1a"


}

resource "aws_subnet" "public_subnet_2" {
    vpc_id = "${aws_vpc.default.id}"

    cidr_block = "${var.public_subnet_2_cidr}"
    availability_zone = "eu-west-1b"


}



resource "aws_subnet" "private_subnet" {
    vpc_id = "${aws_vpc.default.id}"

    cidr_block = "${var.private_subnet_cidr}"
    availability_zone = "eu-west-1a"


}



#########  security group

resource "aws_security_group" "allow_http" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
  vpc_id      = "${aws_vpc.default.id}"

  ingress {
    # TLS (change to whatever ports you need)
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    # Please restrict your ingress to only necessary IPs and ports.
    # Opening to 0.0.0.0/0 can lead to security vulnerabilities.
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]

  }
}


##### load balancer

resource "aws_lb" "Jenkins" {
  name               = "jenkins-lb-tf"
  internal           = false
  load_balancer_type = "application"
  security_groups    = ["${aws_security_group.allow_http.id}"]
  subnets            = ["${aws_subnet.public_subnet.id}","${aws_subnet.public_subnet_2.id}"]


}

# target group

resource "aws_alb_target_group" "group" {
  name     = "terraform-example-alb-target"
  port     = 8080
  protocol = "HTTP"
  vpc_id   = "${aws_vpc.default.id}"
  stickiness {
    type = "lb_cookie"
  }
  # Alter the destination of the health check to be the login page.
  health_check {
    path = "/"
    port = 8080
  }
}




resource "aws_lb_target_group_attachment" "target_group_attach" {
  target_group_arn = "${aws_alb_target_group.group.arn}"
  target_id        = "${aws_instance.jenkins_ec2.id}"
  port             = 8080
}




#######ec2

resource "aws_instance" "jenkins_ec2"{
  ami           = "ami-01f14919ba412de34"
  instance_type = "t2.micro"
  key_name      =   "tavisca-eu-west-1"
  subnet_id    =   "${aws_subnet.private_subnet.id}"

}


resource "aws_lb_listener" "front_end" {
  load_balancer_arn = "${aws_lb.Jenkins.arn}"
  port              = "8080"
  protocol          = "HTTP"
    default_action {
    type             = "forward"
    target_group_arn = "${aws_alb_target_group.group.arn}"
  }
}


##############

resource "aws_route_table" "public_routable" {
  vpc_id = "${aws_vpc.default.id}"

  route {
    cidr_block = "10.0.0.0/16"
    gateway_id = "${aws_internet_gateway.gw.id}"
  }

  

}

